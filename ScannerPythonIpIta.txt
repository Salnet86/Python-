import socket
from concurrent.futures import ThreadPoolExecutor

# Funzione che controlla se una porta è aperta su un certo IP
def check_port(ip, port):
try:
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.settimeout(1) # Timeout di 1 secondo per la connessione
result = sock.connect_ex((ip, port))
sock.close()
return result == 0 # Se result è 0, la porta è aperta
except Exception as e:
return False

# Funzione che scansiona un IP su un range di porte
def scan_ip(ip, port_range):
open_ports = []
for port in port_range:
if check_port(ip, port):
open_ports.append(port)
return open_ports

# Funzione principale per scansionare un range di IP con threading
def scan_ips(ip_range, port_range):
results = {}
with ThreadPoolExecutor(max_workers=10) as executor:
futures = {executor.submit(scan_ip, ip, port_range): ip for ip in ip_range}
for future in futures:
ip = futures[future]
try:
open_ports = future.result()
if open_ports:
results[ip] = open_ports
except Exception as exc:
print(f"{ip} generated an exception: {exc}")
return results

# Esempio d'uso
ip_range = [f"192.168.1.{i}" for i in range(1, 255)] # Range di IP da 192.168.1.1 a 192.168.1.254
port_range = range(20, 1025) # Range di porte da 20 a 1024

results = scan_ips(ip_range, port_range)

# Stampa i risultati
for ip, ports in results.items():
print(f"IP: {ip}, Porte Aperte: {ports}")
